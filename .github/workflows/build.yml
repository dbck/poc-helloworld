# Most of this workflow is based on this blog post: https://bee42.com/de/blog/tutorials/dockerized-the-apple-silicon/

name: Build image

on:
  push:
    branches:
      - '*'         # matches every branch that doesn't contain a '/'
      - '*/*'       # matches every branch containing a single '/'
      - '**'        # matches every branch
    tags:
      - "v*.*.*"
#    schedule:
#      - cron: "0 22 * * *"

jobs:
  build:
    name: Build and push docker image
    runs-on: ubuntu-latest
    env:
      IMAGE_NAMESPACE: dbck
      IMAGE_NAME: poc-helloworld

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Expose additional environment variables
      uses: FranzDiebold/github-env-vars-action@v2

    - name: Set up JDK
      uses: actions/setup-java@v1
      with:
        java-version: 11
        server-id: ossrh # Value of the distributionManagement/repository/id field of the pom.xml
        server-username: OSSRH_USERNAME # env variable for username in deploy
        server-password: OSSRH_PASSWORD # env variable for token in deploy
        gpg-private-key: ${{ secrets.OSSRH_GPG_PRIVATE_KEY }} # Value of the GPG private key to import
        gpg-passphrase: OSSRH_GPG_PASSPHRASE # env variable for GPG private key passphrase

    - name: Build, test and deploy with maven
      run: mvn ${MAVEN_OPTIONS} deploy
      env:
        MAVEN_OPTIONS: --quiet --batch-mode --no-transfer-progress
        GITHUB_TOKEN: ${{ github.token }}
        OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}
        OSSRH_PASSWORD: ${{ secrets.OSSRH_TOKEN }}
        OSSRH_GPG_PASSPHRASE: ${{ secrets.OSSRH_GPG_PASSPHRASE }}

    - name: Unpack jar
      run: |
        mkdir -p target/dependency && (cd target/dependency; jar -xf ../*.jar)

    - name: Prepare docker tags
      id: prep
      run: |
        DOCKER_IMAGE=${{ env.IMAGE_NAMESPACE }}/${{ env.IMAGE_NAME }}
        VERSION=snapshot
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/v}
        fi
        if [ "${{ github.event_name }}" = "schedule" ]; then
          VERSION=nightly
        fi
        TAGS="${DOCKER_IMAGE}:${VERSION}"
        if [[ $VERSION =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
          TAGS="$TAGS,${DOCKER_IMAGE}:latest,${DOCKER_IMAGE}:${{ env.CI_SHA_SHORT }}"
        fi
        echo ::set-output name=tags::${TAGS}
        echo ::set-output name=version::${VERSION}

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1
      with:
        platforms: all

    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v1
      with:
        install: true

    - name: Cache Docker layers
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Builder instance name
      run: echo ${{ steps.buildx.outputs.name }}

    - name: Available platforms
      run: echo ${{ steps.buildx.outputs.platforms }}

    - name: Login to DockerHub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push
      uses: docker/build-push-action@v2
      with:
        builder: ${{ steps.buildx.outputs.name }}
        platforms: linux/amd64,linux/arm64
        build-args: |
            BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
            BUILD_REVISION=${CI_SHA_SHORT}
            DEPENDENCY=target/dependency
        context: .
        file: ./Dockerfile
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.prep.outputs.tags }}
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache

    - name: Image digest
      run: echo ${{ steps.docker_build.outputs.digest }}

    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/v')
      uses: actions/create-release@latest
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.prep.outputs.version }}
        release_name: ${{ steps.prep.outputs.version }}
        draft: false
        prerelease: false
        
#    - name: Quality check with maven and sonar
#      run: mvn ${MAVEN_OPTIONS} -Pquality verify # Test already run in previous step
#      env:
#        MAVEN_OPTIONS: --quiet --batch-mode --no-transfer-progress
#        GITHUB_TOKEN: ${{ github.token }}
#        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}