# Most of this workflow is based on this blog post: https://bee42.com/de/blog/tutorials/dockerized-the-apple-silicon/

name: Snapshot

on:
  push:
    branches:
      - '*'         # matches every branch that doesn't contain a '/'
      - '*/*'       # matches every branch containing a single '/'
      - '**'        # matches every branch
      - '!release'  # excludes release branch
#    schedule:
#      - cron: "0 22 * * *"

jobs:
  build:
    name: Build and push docker image
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up JDK
      uses: actions/setup-java@v1
      with:
        java-version: 11
        server-id: ossrh # Value of the distributionManagement/repository/id field of the pom.xml
        server-username: OSSRH_USERNAME # env variable for username in deploy
        server-password: OSSRH_PASSWORD # env variable for token in deploy
        gpg-private-key: ${{ secrets.OSSRH_GPG_PRIVATE_KEY }} # Value of the GPG private key to import
        gpg-passphrase: OSSRH_GPG_PASSPHRASE # env variable for GPG private key passphrase

    - name: Prepare version and docker tags
      id: prep
      run: |
        CURRENT_VERSION="$(mvn ${MAVEN_OPTIONS} help:evaluate -Dexpression=project.version -q -DforceStdout)"
        NEXT_VERSION="$(mvn ${MAVEN_OPTIONS} build-helper:parse-version -DgenerateBackupPoms=false -DnewVersion=\${parsedVersion.majorVersion}.\${parsedVersion.minorVersion}.\${parsedVersion.nextIncrementalVersion} help:evaluate -Dexpression=newVersion -q -DforceStdout)-SNAPSHOT"
        DOCKER_IMAGE=$(mvn ${MAVEN_CLI_OPTS} help:evaluate -Dexpression=docker.image -q -DforceStdout)
        CURRENT_BRANCH=${GITHUB_REF#refs/heads/}
        REVISION_BRANCH=$([[ ${CURRENT_BRANCH} != "release" && ${CURRENT_BRANCH} != "main" ]] && echo "-${CURRENT_BRANCH}")
        REVISION_TYPE=$([[ ${CURRENT_BRANCH} != "release" ]] && echo "-SNAPSHOT")
        DOCKER_TAGS="${DOCKER_IMAGE}:${CURRENT_VERSION}"
        echo $CURRENT_VERSION
        echo $NEXT_VERSION
        echo $DOCKER_IMAGE
        echo $CURRENT_BRANCH
        echo $REVISION_BRANCH
        echo $REVISION_TYPE
        echo $DOCKER_TAGS
        #Release versions
        #DOCKER_TAGS="$${DOCKER_IMAGE}:${CURRENT_VERSION},${DOCKER_IMAGE}:latest,${DOCKER_IMAGE}:${{ env.CI_SHA_SHORT }}"
        echo ::set-output name=current_version::${CURRENT_VERSION}
        echo ::set-output name=next_version::${NEXT_VERSION}
        echo ::set-output name=current_branch::${CURRENT_BRANCH}
        echo ::set-output name=revision_branch::${REVISION_BRANCH}
        echo ::set-output name=revision_type::${REVISION_TYPE}
        echo ::set-output name=docker_tags::${DOCKER_TAGS}

    - name: Build, test and deploy with maven
      run: mvn ${MAVEN_OPTIONS} deploy
      env:
        MAVEN_OPTIONS: --quiet --batch-mode --no-transfer-progress
        GITHUB_TOKEN: ${{ github.token }}
        OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}
        OSSRH_PASSWORD: ${{ secrets.OSSRH_TOKEN }}
        OSSRH_GPG_PASSPHRASE: ${{ secrets.OSSRH_GPG_PASSPHRASE }}

    - name: Unpack jar
      run: |
        mkdir -p target/dependency && (cd target/dependency; jar -xf ../*.jar)

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1
      with:
        platforms: all

    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v1
      with:
        install: true

    - name: Cache Docker layers
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Builder instance name
      run: echo ${{ steps.buildx.outputs.name }}

    - name: Available platforms
      run: echo ${{ steps.buildx.outputs.platforms }}

    - name: Login to DockerHub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push
      uses: docker/build-push-action@v2
      with:
        builder: ${{ steps.buildx.outputs.name }}
        platforms: linux/amd64,linux/arm64
        build-args: |
            DEPENDENCY=target/dependency
        context: .
        file: ./Dockerfile
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.prep.outputs.docker_tags }}
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache

    - name: Image digest
      run: echo ${{ steps.docker_build.outputs.digest }}

#    - name: Create Release
#      if: startsWith(github.ref, 'refs/tags/v')
#      uses: actions/create-release@latest
#      env:
#        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#      with:
#        tag_name: v${{ steps.prep.outputs.version }}
#        release_name: ${{ steps.prep.outputs.version }}
#        draft: false
#        prerelease: false
        
#    - name: Quality check with maven and sonar
#      run: mvn ${MAVEN_OPTIONS} -Pquality verify # Test already run in previous step
#      env:
#        MAVEN_OPTIONS: --quiet --batch-mode --no-transfer-progress
#        GITHUB_TOKEN: ${{ github.token }}
#        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}